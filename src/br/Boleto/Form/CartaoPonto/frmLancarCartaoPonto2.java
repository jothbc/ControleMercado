/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.Boleto.Form.CartaoPonto;

import JDBC.ConnectionFactory;
import funcoes.CDbl;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.DAO.funcionario.CartaoPontoDAO;
import model.bean.CartaoPonto;
import model.bean.Funcionario;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Jonathan CR
 */
public class frmLancarCartaoPonto2 extends javax.swing.JFrame {

    Funcionario fun;
    int ano, mes, dia, maior;
    Calendar calendario;
    DefaultTableModel tb;
    SpinnerNumberModel diaSpinner;
    String jornadaString;
    boolean jaLancado;
    int reg, reg_sub;
    boolean infoMensagem = true;

    /**
     * Creates new form frmLancarCartao2
     *
     * @param funcionario
     */
    public frmLancarCartaoPonto2(Funcionario funcionario) {
        initComponents();
        fun = funcionario;
        jaLancado = false;
        reg = -1;
        reg_sub = -1;
        tb = (DefaultTableModel) jTable1.getModel();
        calendario = Calendar.getInstance();
        mes = calendario.get(Calendar.MONTH) + 1;
        ano = calendario.get(Calendar.YEAR);
        calendario.setFirstDayOfWeek(Calendar.SUNDAY);
        jSlider1.setValue(mes);
        anoSpinner.setValue(ano);
        diaSpinner = (SpinnerNumberModel) jSpinnerDia.getModel();
        diaSpinner.setValue(1);
        jornada7.setSelected(true);
        jornadaString = "07:20";
        nomeLbl.setText(funcionario.getNome());
        entradatxt.requestFocus();
        buttonGroup1.add(jornada6);
        buttonGroup1.add(jornada7);
        buttonGroup1.add(jornada5);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        anoSpinner = new javax.swing.JSpinner();
        jSlider1 = new javax.swing.JSlider();
        mestxt = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        entradatxt = new javax.swing.JFormattedTextField();
        sintervalo = new javax.swing.JFormattedTextField();
        eintervalo = new javax.swing.JFormattedTextField();
        saidatxt = new javax.swing.JFormattedTextField();
        entrada2 = new javax.swing.JFormattedTextField();
        saida2 = new javax.swing.JFormattedTextField();
        jSpinnerDia = new javax.swing.JSpinner();
        sabadoBtn = new javax.swing.JButton();
        domingoBtn = new javax.swing.JButton();
        folgaBtn = new javax.swing.JButton();
        feriadoBtn = new javax.swing.JButton();
        atestadoBtn = new javax.swing.JButton();
        faltaBtn = new javax.swing.JButton();
        limpaDiaBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jornada6 = new javax.swing.JRadioButton();
        jornada7 = new javax.swing.JRadioButton();
        jornada5 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        nomeLbl = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        horasExtrastxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        horasFaltastxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        horasExtrasNoturnastxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        reducaoNoturnotxt = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        valorHora = new javax.swing.JTextField();
        valorHoraExtra = new javax.swing.JTextField();
        valorTotalSalario = new javax.swing.JTextField();
        valorTotalExtra = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        valorDSR = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        INSS = new javax.swing.JTextField();
        horaDSR = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        feriadosSpin = new javax.swing.JSpinner();
        jButton10 = new javax.swing.JButton();
        inssSpin = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        salarioBase = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        descontoSpin = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        indenizacaoSpin = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        concluirBtn = new javax.swing.JButton();
        imprimirBtn = new javax.swing.JButton();
        editbtn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        importBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cart√£o Ponto");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        anoSpinner.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        anoSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                anoSpinnerStateChanged(evt);
            }
        });

        jSlider1.setBackground(new java.awt.Color(153, 153, 153));
        jSlider1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jSlider1.setForeground(new java.awt.Color(0, 0, 0));
        jSlider1.setMajorTickSpacing(1);
        jSlider1.setMaximum(12);
        jSlider1.setMinimum(1);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jSlider1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSlider1MouseClicked(evt);
            }
        });

        mestxt.setText("Mes");

        jLabel1.setText("Ano");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(anoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(288, 288, 288)
                .addComponent(mestxt, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(59, 59, 59))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mestxt)
                    .addComponent(jLabel1))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 1, Short.MAX_VALUE)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dia", "Entrada", "S. Intervalo", "E. Intervalo", "Saida", "Entrada", "Saida", "Horas Trabalhadas"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        try {
            entradatxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        entradatxt.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        entradatxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                entradatxtKeyPressed(evt);
            }
        });

        try {
            sintervalo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        sintervalo.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        sintervalo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sintervaloKeyPressed(evt);
            }
        });

        try {
            eintervalo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        eintervalo.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        eintervalo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                eintervaloKeyPressed(evt);
            }
        });

        try {
            saidatxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        saidatxt.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        saidatxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saidatxtActionPerformed(evt);
            }
        });
        saidatxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saidatxtKeyPressed(evt);
            }
        });

        try {
            entrada2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        entrada2.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        entrada2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                entrada2KeyPressed(evt);
            }
        });

        try {
            saida2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        saida2.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        saida2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saida2KeyPressed(evt);
            }
        });

        jSpinnerDia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerDiaStateChanged(evt);
            }
        });

        sabadoBtn.setText("S√°bado");
        sabadoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sabadoBtnActionPerformed(evt);
            }
        });

        domingoBtn.setText("Domingo");
        domingoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                domingoBtnActionPerformed(evt);
            }
        });

        folgaBtn.setText("Folga");
        folgaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folgaBtnActionPerformed(evt);
            }
        });

        feriadoBtn.setText("Feriado");
        feriadoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feriadoBtnActionPerformed(evt);
            }
        });

        atestadoBtn.setText("Atestado");
        atestadoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atestadoBtnActionPerformed(evt);
            }
        });

        faltaBtn.setText("Falta");
        faltaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faltaBtnActionPerformed(evt);
            }
        });

        limpaDiaBtn.setText("Limpar Dia");
        limpaDiaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpaDiaBtnActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Jornada"));

        jornada6.setBackground(new java.awt.Color(255, 255, 255));
        jornada6.setText("06:00");
        jornada6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jornada6MouseClicked(evt);
            }
        });
        jornada6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jornada6ActionPerformed(evt);
            }
        });

        jornada7.setBackground(new java.awt.Color(255, 255, 255));
        jornada7.setText("07:20");
        jornada7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jornada7ActionPerformed(evt);
            }
        });

        jornada5.setBackground(new java.awt.Color(255, 255, 255));
        jornada5.setText("05:20");
        jornada5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jornada5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jornada7)
                    .addComponent(jornada5)
                    .addComponent(jornada6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jornada5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jornada6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jornada7))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Estat√≠stica", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        nomeLbl.setEditable(false);
        nomeLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nomeLbl.setFocusable(false);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Calculo Folha"));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Horas Extras");

        horasExtrastxt.setEditable(false);
        horasExtrastxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Horas Faltas");

        horasFaltastxt.setEditable(false);
        horasFaltastxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Horas Noturnas");

        horasExtrasNoturnastxt.setEditable(false);
        horasExtrasNoturnastxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Redu√ß√£o Horas Noturno");

        reducaoNoturnotxt.setEditable(false);
        reducaoNoturnotxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(horasExtrastxt)
            .addComponent(horasFaltastxt)
            .addComponent(horasExtrasNoturnastxt)
            .addComponent(reducaoNoturnotxt)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(0, 0, 0)
                .addComponent(horasExtrastxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(0, 0, 0)
                .addComponent(horasFaltastxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(0, 0, 0)
                .addComponent(horasExtrasNoturnastxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(0, 0, 0)
                .addComponent(reducaoNoturnotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Calculo Aproximado"));

        jLabel7.setText("Sal√°rio Base");

        jLabel8.setText("Valor Hora");

        jLabel9.setText("Valor H. Extra");

        jLabel10.setText("Valor Total");

        jLabel11.setText("Total Extra");

        jLabel12.setText("Total DSR");

        jLabel14.setText("INSS");

        jLabel13.setText("N¬∫ Feriados");

        feriadosSpin.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jButton10.setText("Calcular");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        inssSpin.setModel(new javax.swing.SpinnerNumberModel(9, 0, null, 1));

        jLabel15.setText("%");

        salarioBase.setModel(new javax.swing.SpinnerNumberModel(1323.0d, 0.0d, null, 1.0d));

        jLabel16.setText("Descontos");

        descontoSpin.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 1.0d));

        jLabel17.setText("Hora DSR");

        indenizacaoSpin.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 1.0d));

        jLabel18.setText("Indeniza√ß√£o");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(valorTotalSalario)
            .addComponent(valorTotalExtra)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addGap(31, 31, 31))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(salarioBase, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(feriadosSpin))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(descontoSpin, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(indenizacaoSpin)))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(inssSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(INSS))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(horaDSR)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addComponent(valorDSR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabel14)))
                        .addGap(52, 52, 52)
                        .addComponent(jLabel18)
                        .addGap(0, 13, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addComponent(valorHora, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(valorHoraExtra))
            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel11))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jLabel10)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salarioBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descontoSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(feriadosSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indenizacaoSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valorHoraExtra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valorHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(INSS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inssSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15)))
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valorDSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaDSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addGap(0, 0, 0)
                .addComponent(valorTotalExtra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(0, 0, 0)
                .addComponent(valorTotalSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nomeLbl)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(nomeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        concluirBtn.setText("Concluir");
        concluirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                concluirBtnActionPerformed(evt);
            }
        });

        imprimirBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/printer.png"))); // NOI18N
        imprimirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirBtnActionPerformed(evt);
            }
        });

        editbtn.setText("Editar");
        editbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editbtnActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Dia Corrente");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        importBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/page_white_picture.png"))); // NOI18N
        importBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jSpinnerDia, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(entradatxt, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sintervalo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(eintervalo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(saidatxt, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(entrada2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(saida2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(limpaDiaBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(sabadoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(faltaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(atestadoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(feriadoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(folgaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(domingoBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(imprimirBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(editbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(concluirBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(importBtn))))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSpinnerDia, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(entradatxt)
                                        .addComponent(sintervalo)
                                        .addComponent(eintervalo)
                                        .addComponent(saidatxt)
                                        .addComponent(entrada2)
                                        .addComponent(saida2)
                                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(importBtn)
                                .addGap(36, 36, 36)
                                .addComponent(editbtn)
                                .addGap(8, 8, 8)
                                .addComponent(sabadoBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(domingoBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(folgaBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(feriadoBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(atestadoBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(faltaBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limpaDiaBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(imprimirBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(concluirBtn)
                                .addGap(5, 5, 5))))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider1MouseClicked
        definirMes();
    }//GEN-LAST:event_jSlider1MouseClicked

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        definirMes();
    }//GEN-LAST:event_jSlider1StateChanged

    private void anoSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_anoSpinnerStateChanged
        ano = (int) anoSpinner.getValue();
        calendario.set(Calendar.YEAR, ano);
        atualizardias();
    }//GEN-LAST:event_anoSpinnerStateChanged

    private void entradatxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_entradatxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            sintervalo.requestFocus();
            verificacaoMeiaNoite(entradatxt.getText());
        }
    }//GEN-LAST:event_entradatxtKeyPressed

    private void sintervaloKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sintervaloKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            eintervalo.requestFocus();
            verificacaoMeiaNoite(sintervalo.getText());
        }
    }//GEN-LAST:event_sintervaloKeyPressed

    private void eintervaloKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eintervaloKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saidatxt.requestFocus();
            verificacaoMeiaNoite(eintervalo.getText());
        }
    }//GEN-LAST:event_eintervaloKeyPressed

    private void saidatxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saidatxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //lancar();
            verificacaoMeiaNoite(saidatxt.getText());
            lancarHorarios();
            diaSpinner.setValue((int) diaSpinner.getValue() + 1);
            entradatxt.requestFocus();
            Horas();
        }
    }//GEN-LAST:event_saidatxtKeyPressed

    private void entrada2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_entrada2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saida2.requestFocus();
            verificacaoMeiaNoite(entrada2.getText());
        }
    }//GEN-LAST:event_entrada2KeyPressed

    private void saida2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saida2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //lancar();
            verificacaoMeiaNoite(saida2.getText());
            lancarHorarios();
            diaSpinner.setValue((int) diaSpinner.getValue() + 1);
            entradatxt.requestFocus();
            Horas();
        }
    }//GEN-LAST:event_saida2KeyPressed

    private void jSpinnerDiaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDiaStateChanged
        if ((int) diaSpinner.getValue() >= maior) {
            diaSpinner.setValue(maior);
        } else if ((int) diaSpinner.getValue() < 1) {
            diaSpinner.setValue(1);
        }
    }//GEN-LAST:event_jSpinnerDiaStateChanged

    private void sabadoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sabadoBtnActionPerformed
        //lancar();
        lancarHorarios();
        tb.setValueAt("S", (int) diaSpinner.getValue() - 1, 0);
        diaSpinner.setValue((int) diaSpinner.getValue() + 1);
        entradatxt.requestFocus();
    }//GEN-LAST:event_sabadoBtnActionPerformed

    private void domingoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_domingoBtnActionPerformed
        //lancar();
        lancarHorarios();
        tb.setValueAt("D", (int) diaSpinner.getValue() - 1, 0);
        diaSpinner.setValue((int) diaSpinner.getValue() + 1);
        Horas();
        entradatxt.requestFocus();
    }//GEN-LAST:event_domingoBtnActionPerformed

    private void folgaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folgaBtnActionPerformed
        //lancar();
        lancarHorarios();
        tb.setValueAt("R", (int) diaSpinner.getValue() - 1, 0);
        tb.setValueAt("00:00", (int) diaSpinner.getValue() - 1, 7);
        diaSpinner.setValue((int) diaSpinner.getValue() + 1);
        Horas();
        entradatxt.requestFocus();
    }//GEN-LAST:event_folgaBtnActionPerformed

    private void feriadoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feriadoBtnActionPerformed
        //lancar();
        lancarHorarios();
        tb.setValueAt("H", (int) diaSpinner.getValue() - 1, 0);
        diaSpinner.setValue((int) diaSpinner.getValue() + 1);
        entradatxt.requestFocus();
    }//GEN-LAST:event_feriadoBtnActionPerformed

    private void atestadoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atestadoBtnActionPerformed
        //lancar();
        lancarHorarios();
        tb.setValueAt("A", (int) diaSpinner.getValue() - 1, 0);
        tb.setValueAt(jornada(), (int) diaSpinner.getValue() - 1, 7);
        diaSpinner.setValue((int) diaSpinner.getValue() + 1);
        Horas();
        entradatxt.requestFocus();
    }//GEN-LAST:event_atestadoBtnActionPerformed

    private void faltaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faltaBtnActionPerformed
        //lancar();
        lancarHorarios();
        tb.setValueAt("F", (int) diaSpinner.getValue() - 1, 0);
        tb.setValueAt("00:00", (int) diaSpinner.getValue() - 1, 7);
        diaSpinner.setValue((int) diaSpinner.getValue() + 1);
        Horas();
        entradatxt.requestFocus();
    }//GEN-LAST:event_faltaBtnActionPerformed

    private void limpaDiaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpaDiaBtnActionPerformed
        int linha = (int) diaSpinner.getValue() - 1;
        tb.setValueAt(linha + 1, linha, 0);
        tb.setValueAt(null, linha, 1);
        tb.setValueAt(null, linha, 2);
        tb.setValueAt(null, linha, 3);
        tb.setValueAt(null, linha, 4);
        tb.setValueAt(null, linha, 5);
        tb.setValueAt(null, linha, 6);
        tb.setValueAt(null, linha, 7);
        Horas();
        entradatxt.requestFocus();
    }//GEN-LAST:event_limpaDiaBtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getSelectedRow() < 0) {
            return;
        }
        diaSpinner.setValue((int) jTable1.getSelectedRow() + 1);
        carregarDiaClickado((int) jTable1.getSelectedRow());
    }//GEN-LAST:event_jTable1MouseClicked

    private void jornada6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jornada6MouseClicked
    }//GEN-LAST:event_jornada6MouseClicked

    private void jornada7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jornada7ActionPerformed
        if (jornada7.isSelected()) {
            jornadaString = "07:20";
            System.out.println("07:20");
        }
    }//GEN-LAST:event_jornada7ActionPerformed

    private void jornada6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jornada6ActionPerformed
        if (jornada6.isSelected()) {
            jornadaString = "06:00";
            System.out.println("06:00");
        }
    }//GEN-LAST:event_jornada6ActionPerformed

    private void saidatxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saidatxtActionPerformed
    }//GEN-LAST:event_saidatxtActionPerformed

    private void concluirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_concluirBtnActionPerformed
        if (!jaLancado) {
            salvar();
        } else {
            int op = -1;
            op = JOptionPane.showOptionDialog(null, "Deseja realmente atualizar o cart√£o Ponto?\nAs altera√ß√µes ser√£o irreversiv√©is!", "Atualizar Cart√£o Ponto", 1, op, null, null, null);
            if (op != 0) {
                return;
            }
            atualizar();
        }
    }//GEN-LAST:event_concluirBtnActionPerformed

    private void imprimirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirBtnActionPerformed
        Connection conn = ConnectionFactory.getConnection();
        String scr = "C:\\CartaoPontojs.jasper";
        JasperPrint js = null;
        try {
            HashMap<String, Object> map = new HashMap<>();
            map.put("cdfun", fun.getCodigo());
            map.put("anofun", ano);
            map.put("mesfun", mes);
            map.put("jornadafun", jornadaString);
            js = JasperFillManager.fillReport(scr, map, conn);
        } catch (JRException e) {
            JOptionPane.showMessageDialog(null, "Erro:" + e.getMessage());
        }
        JasperViewer vw = new JasperViewer(js, false);
        vw.setTitle("Cart√£o Ponto");
        vw.setVisible(true);
        ConnectionFactory.closeConnection(conn);

    }//GEN-LAST:event_imprimirBtnActionPerformed

    private void editbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editbtnActionPerformed
        StatusBtn(true);
    }//GEN-LAST:event_editbtnActionPerformed

    private void jornada5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jornada5ActionPerformed
        // TODO add your handling code here:
        if (jornada5.isSelected()) {
            jornadaString = "05:20";
            System.out.println("05:20");
        }
    }//GEN-LAST:event_jornada5ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        calcularAproximacao();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void importBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importBtnActionPerformed
        importCVS();
    }//GEN-LAST:event_importBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmLancarCartaoPonto2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmLancarCartaoPonto2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmLancarCartaoPonto2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmLancarCartaoPonto2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmLancarCartaoPonto2(new Funcionario()).setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField INSS;
    private javax.swing.JSpinner anoSpinner;
    private javax.swing.JButton atestadoBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton concluirBtn;
    private javax.swing.JSpinner descontoSpin;
    private javax.swing.JButton domingoBtn;
    private javax.swing.JButton editbtn;
    private javax.swing.JFormattedTextField eintervalo;
    private javax.swing.JFormattedTextField entrada2;
    private javax.swing.JFormattedTextField entradatxt;
    private javax.swing.JButton faltaBtn;
    private javax.swing.JButton feriadoBtn;
    private javax.swing.JSpinner feriadosSpin;
    private javax.swing.JButton folgaBtn;
    private javax.swing.JTextField horaDSR;
    private javax.swing.JTextField horasExtrasNoturnastxt;
    private javax.swing.JTextField horasExtrastxt;
    private javax.swing.JTextField horasFaltastxt;
    private javax.swing.JButton importBtn;
    private javax.swing.JButton imprimirBtn;
    private javax.swing.JSpinner indenizacaoSpin;
    private javax.swing.JSpinner inssSpin;
    private javax.swing.JButton jButton10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSpinner jSpinnerDia;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton jornada5;
    private javax.swing.JRadioButton jornada6;
    private javax.swing.JRadioButton jornada7;
    private javax.swing.JButton limpaDiaBtn;
    private javax.swing.JLabel mestxt;
    private javax.swing.JTextField nomeLbl;
    private javax.swing.JTextField reducaoNoturnotxt;
    private javax.swing.JButton sabadoBtn;
    private javax.swing.JFormattedTextField saida2;
    private javax.swing.JFormattedTextField saidatxt;
    private javax.swing.JSpinner salarioBase;
    private javax.swing.JFormattedTextField sintervalo;
    private javax.swing.JTextField valorDSR;
    private javax.swing.JTextField valorHora;
    private javax.swing.JTextField valorHoraExtra;
    private javax.swing.JTextField valorTotalExtra;
    private javax.swing.JTextField valorTotalSalario;
    // End of variables declaration//GEN-END:variables

    /*
    * Procedimento para escrever o mes no jLabel e atuzalizar a variavel mes, tamb√©m chama o procedimento atualizardias()
     */
    private void definirMes() {
        mes = jSlider1.getValue();
        calendario.set(Calendar.MONTH, mes - 1);
        switch (jSlider1.getValue()) {
            case 1:
                mestxt.setText("Janeiro");
                break;
            case 2:
                mestxt.setText("Fevereiro");
                break;
            case 3:
                mestxt.setText("Mar√ßo");
                break;
            case 4:
                mestxt.setText("Abril");
                break;
            case 5:
                mestxt.setText("Maio");
                break;
            case 6:
                mestxt.setText("Junho");
                break;
            case 7:
                mestxt.setText("Julho");
                break;
            case 8:
                mestxt.setText("Agosto");
                break;
            case 9:
                mestxt.setText("Setembro");
                break;
            case 10:
                mestxt.setText("Outubro");
                break;
            case 11:
                mestxt.setText("Novembro");
                break;
            case 12:
                mestxt.setText("Dezembro");
                break;
        }
        atualizardias();
    }

    /*
    * Procedimento para atualizar os dias na JTable conforme muda mes/ano
     */
    private void atualizardias() {
        int maxDias = calendario.getActualMaximum(Calendar.DAY_OF_MONTH); //quantidade de dias do mes selecionado;
        tb.setRowCount(maxDias);
        maior = maxDias;
        for (int x = 1; x < maxDias + 1; x++) {
            calendario.set(Calendar.DAY_OF_MONTH, x);
            if (calendario.get(Calendar.DAY_OF_WEEK) == 1) {
                tb.setValueAt("D", x - 1, 0);
            } else {
                tb.setValueAt(x, x - 1, 0);
            }
        }
        calendario.set(Calendar.DAY_OF_MONTH, 1);
        verificarExistente();
    }

    @Deprecated
    public Calendar iniHorarioZeradoNoCalendar(Calendar c) {
        c.set(Calendar.HOUR_OF_DAY, 0);
        c.set(Calendar.MINUTE, 0);
        c.set(Calendar.MILLISECOND, 0);
        return c;
    }

    private void Horas() {
        //inicia vari√°veis zeradas
        double entrada = 0,
                saida_intervalo = 0,
                entrada_intervalo = 0,
                saida = 0,
                entrada_ex = 0,
                saida_ex = 0;
        double horasTrabalhadas = 0,
                extra = 0,
                falta = 0,
                noturna = 0;
        //define base com valor da jornada em decimal
        double base = horaPDecimal(jornadaString);
        //executa o procedimento em todas as linhas da tabela, sendo "x" a linha
        for (int x = 0; x < jTable1.getRowCount(); x++) {
            entrada = 0;
            saida_intervalo = 0;
            entrada_intervalo = 0;
            saida = 0;
            entrada_ex = 0;
            saida_ex = 0;
            horasTrabalhadas = 0;
            if (tb.getValueAt(x, 1) != null) {
                entrada = horaPDecimal((String) tb.getValueAt(x, 1));
            }
            if (tb.getValueAt(x, 2) != null) {
                saida_intervalo = horaPDecimal((String) tb.getValueAt(x, 2));
            }
            if (tb.getValueAt(x, 3) != null) {
                entrada_intervalo = horaPDecimal((String) tb.getValueAt(x, 3));
            }
            if (tb.getValueAt(x, 4) != null) {
                saida = horaPDecimal((String) tb.getValueAt(x, 4));
            }
            if (tb.getValueAt(x, 5) != null) {
                entrada_ex = horaPDecimal((String) tb.getValueAt(x, 5));
            }
            if (tb.getValueAt(x, 6) != null) {
                saida_ex = horaPDecimal((String) tb.getValueAt(x, 6));
            }
            //horas trabalhadas do dia:
            horasTrabalhadas = (saida_intervalo + saida + saida_ex) - (entrada + entrada_intervalo + entrada_ex);
            //verifica se o funcion√°rio fez horas extras
            if (horasTrabalhadas > base) {
                // extra recebe as horas trabalhadas - jornada:
                //System.out.println("EXTRA DIA "+(x+1)+": "+(horasTrabalhadas - base));
                extra += horasTrabalhadas - base;
                double[] horarios = {entrada, saida_intervalo, entrada_intervalo, saida, entrada_ex, saida_ex};
                //##############calculo noturno#####################//
                horarios = calculoNoturno(horarios);
                entrada = horarios[0];
                saida_intervalo = horarios[1];
                entrada_intervalo = horarios[2];
                saida = horarios[3];
                entrada_ex = horarios[4];
                saida_ex = horarios[5];
                horasTrabalhadas = (saida_intervalo + saida + saida_ex) - (entrada + entrada_intervalo + entrada_ex);
                if (horasTrabalhadas > 6.99) {
                    horasTrabalhadas = 7;
                } else if (horasTrabalhadas < 0) {
                    horasTrabalhadas += 29;
                }
                noturna += horasTrabalhadas;
                extra -= horasTrabalhadas;
                //###############fim calculo noturno##############//
            } //verifica se houve horas faltas no dia:
            else if (horasTrabalhadas < base) {
                if (horasTrabalhadas != 0) {
                    falta += base - horasTrabalhadas;
                }
                if (tb.getValueAt(x, 0) == "F") {
                    falta += base - horasTrabalhadas;
                }
            }
        }
        horasExtrastxt.setText(decimalPHora(extra));
        horasFaltastxt.setText(decimalPHora(falta));
        horasExtrasNoturnastxt.setText(decimalPHora(noturna));
        reducaoNoturnotxt.setText(Double.toString(CDbl.CDblDuasCasas(7.5 / 60 * noturna)));
    }

    private void lancarHorarios() {
        String entradaS, s_intervaloS, e_intervaloS, saidaS, entrada_2S, saida_2S;
        entradaS = entradatxt.getText();
        s_intervaloS = sintervalo.getText();
        e_intervaloS = eintervalo.getText();
        saidaS = saidatxt.getText();
        entrada_2S = entrada2.getText();
        saida_2S = saida2.getText();
        int diaAtual = (int) diaSpinner.getValue();
        float entrada = 0,
                saida_intervalo = 0,
                entrada_intervalo = 0,
                saida = 0,
                entrada_ex = 0,
                saida_ex = 0;
        float horasTrabalhadas = 0;
        //lancar na tabela e setar valores double
        if (!entradaS.equals("  :  ")) {
            tb.setValueAt(entradaS, diaAtual - 1, 1);
            entrada = horaPDecimal(entradaS);
        }
        if (!s_intervaloS.equals("  :  ")) {
            tb.setValueAt(s_intervaloS, diaAtual - 1, 2);
            saida_intervalo = horaPDecimal(s_intervaloS);
        }
        if (!e_intervaloS.equals("  :  ")) {
            tb.setValueAt(e_intervaloS, diaAtual - 1, 3);
            entrada_intervalo = horaPDecimal(e_intervaloS);
        }
        if (!saidaS.equals("  :  ")) {
            tb.setValueAt(saidaS, diaAtual - 1, 4);
            saida = horaPDecimal(saidaS);
        }
        if (!entrada_2S.equals("  :  ")) {
            tb.setValueAt(entrada_2S, diaAtual - 1, 5);
            entrada_ex = horaPDecimal(entrada_2S);
        }
        if (!saida_2S.equals("  :  ")) {
            tb.setValueAt(saida_2S, diaAtual - 1, 6);
            saida_ex = horaPDecimal(saida_2S);
        }
        horasTrabalhadas = (saida_intervalo + saida + saida_ex) - (entrada + entrada_intervalo + entrada_ex);
        double horasTrabalhadas2 = CDbl.CDblDuasCasas(horasTrabalhadas);
        System.out.println("DIA " + diaAtual + ": " + horasTrabalhadas2 + " Horas Extras do dia: " + (horasTrabalhadas2 - 7.33));
        tb.setValueAt(decimalPHora(horasTrabalhadas2), diaAtual - 1, 7);
        limpaCampos();
        Horas();
    }

    @Deprecated
    private void lancar() {
        String entrada, s_intervalo, e_intervalo, saida, entrada_2, saida_2;
        entrada = entradatxt.getText();
        s_intervalo = sintervalo.getText();
        e_intervalo = eintervalo.getText();
        saida = saidatxt.getText();
        entrada_2 = entrada2.getText();
        saida_2 = saida2.getText();
        int diaAtual = (int) diaSpinner.getValue();

        //Instancia calendarios
        Calendar entradaCalendar = Calendar.getInstance();
        Calendar s_intervaloCalendar = Calendar.getInstance();
        Calendar e_intervaloCalendar = Calendar.getInstance();
        Calendar saidaCalendar = Calendar.getInstance();
        Calendar entrada2Calendar = Calendar.getInstance();
        Calendar saida2Calendar = Calendar.getInstance();
        //seta dia,mes,ano atual (dia do spinner)
        entradaCalendar.set(ano, mes, (int) diaSpinner.getValue());
        s_intervaloCalendar.set(ano, mes, (int) diaSpinner.getValue());
        e_intervaloCalendar.set(ano, mes, (int) diaSpinner.getValue());
        saidaCalendar.set(ano, mes, (int) diaSpinner.getValue());
        entrada2Calendar.set(ano, mes, (int) diaSpinner.getValue());
        saida2Calendar.set(ano, mes, (int) diaSpinner.getValue());
        //inicia horarios dos calendarios zerados
        entradaCalendar = iniHorarioZeradoNoCalendar(entradaCalendar);
        s_intervaloCalendar = iniHorarioZeradoNoCalendar(s_intervaloCalendar);
        e_intervaloCalendar = iniHorarioZeradoNoCalendar(e_intervaloCalendar);
        saidaCalendar = iniHorarioZeradoNoCalendar(saidaCalendar);
        entrada2Calendar = iniHorarioZeradoNoCalendar(entrada2Calendar);
        saida2Calendar = iniHorarioZeradoNoCalendar(saida2Calendar);
        //inicializa horarios String em 00:00
        String[] entradaString = {"00", "00"};
        String[] s_intervaloString = {"00", "00"};
        String[] e_intervaloString = {"00", "00"};
        String[] saidaString = {"00", "00"};
        String[] entrada2String = {"00", "00"};
        String[] saida2String = {"00", "00"};

        if (!entrada.equals("  :  ")) {
            tb.setValueAt(entrada, diaAtual - 1, 1);
            entradaString = entrada.split(":");
            entradaCalendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(entradaString[0]));
            entradaCalendar.set(Calendar.MINUTE, Integer.parseInt(entradaString[1]));
            entradaCalendar.set(Calendar.MILLISECOND, 0);
        }
        if (!s_intervalo.equals("  :  ")) {
            tb.setValueAt(s_intervalo, diaAtual - 1, 2);
            s_intervaloString = s_intervalo.split(":");
            s_intervaloCalendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(s_intervaloString[0]));
            s_intervaloCalendar.set(Calendar.MINUTE, Integer.parseInt(s_intervaloString[1]));
            s_intervaloCalendar.set(Calendar.MILLISECOND, 0);
        }
        if (!e_intervalo.equals("  :  ")) {
            tb.setValueAt(e_intervalo, diaAtual - 1, 3);
            e_intervaloString = e_intervalo.split(":");
            e_intervaloCalendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(e_intervaloString[0]));
            e_intervaloCalendar.set(Calendar.MINUTE, Integer.parseInt(e_intervaloString[1]));
            e_intervaloCalendar.set(Calendar.MILLISECOND, 0);
        }
        if (!saida.equals("  :  ")) {
            tb.setValueAt(saida, diaAtual - 1, 4);
            saidaString = saida.split(":");
            saidaCalendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(saidaString[0]));
            saidaCalendar.set(Calendar.MINUTE, Integer.parseInt(saidaString[1]));
            saidaCalendar.set(Calendar.MILLISECOND, 0);
        }
        if (!entrada_2.equals("  :  ")) {
            tb.setValueAt(entrada_2, diaAtual - 1, 5);
            entrada2String = entrada_2.split(":");
            entrada2Calendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(entrada2String[0]));
            entrada2Calendar.set(Calendar.MINUTE, Integer.parseInt(entrada2String[1]));
            entrada2Calendar.set(Calendar.MILLISECOND, 0);
        }
        if (!saida_2.equals("  :  ")) {
            tb.setValueAt(saida_2, diaAtual - 1, 6);
            saida2String = saida_2.split(":");
            saida2Calendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(saida2String[0]));
            saida2Calendar.set(Calendar.MINUTE, Integer.parseInt(saida2String[1]));
            saida2Calendar.set(Calendar.MILLISECOND, 0);
        }
        //hora saida
        Calendar horasSaida = saidaCalendar;
        horasSaida.add(Calendar.HOUR_OF_DAY, s_intervaloCalendar.get(Calendar.HOUR_OF_DAY));
        horasSaida.add(Calendar.MINUTE, s_intervaloCalendar.get(Calendar.MINUTE));
        horasSaida.add(Calendar.HOUR_OF_DAY, saida2Calendar.get(Calendar.HOUR_OF_DAY));
        horasSaida.add(Calendar.MINUTE, saida2Calendar.get(Calendar.MINUTE));
        //horas entrada
        Calendar horasEntrada = e_intervaloCalendar;
        horasEntrada.add(Calendar.HOUR_OF_DAY, entradaCalendar.get(Calendar.HOUR_OF_DAY));
        horasEntrada.add(Calendar.MINUTE, entradaCalendar.get(Calendar.MINUTE));
        horasEntrada.add(Calendar.HOUR_OF_DAY, entrada2Calendar.get(Calendar.HOUR_OF_DAY));
        horasEntrada.add(Calendar.MINUTE, entrada2Calendar.get(Calendar.MINUTE));
        //media de horas saida - entrada
        Calendar media = horasSaida;
        media.add(Calendar.HOUR_OF_DAY, -horasEntrada.get(Calendar.HOUR_OF_DAY));
        media.add(Calendar.MINUTE, -horasEntrada.get(Calendar.MINUTE));
        //convertendo em formato date
        Date mediaDate = media.getTime();
        SimpleDateFormat formato = new SimpleDateFormat("HH:mm");
        String mediaString = formato.format(mediaDate);
        //colocando na tabela
        tb.setValueAt(mediaString, diaAtual - 1, 7);
        limpaCampos();
        Horas();
    }

    private Object jornada() {
        return jornadaString;
    }

    @Deprecated
    private void horasFaltas() {
        Calendar hrTrabalhada = Calendar.getInstance(),
                totalFalta = Calendar.getInstance(),
                compara = Calendar.getInstance(),
                extra = Calendar.getInstance(),
                noturna = Calendar.getInstance();
        String[] temp = {"00", "00"};
        String[] jornadaS = jornadaString.split(":");
        //zera horas faltas e extras e noturna
        totalFalta.set(Calendar.MINUTE, 0);
        totalFalta.set(Calendar.HOUR_OF_DAY, 0);
        totalFalta.set(Calendar.MILLISECOND, 0);
        extra.set(Calendar.MINUTE, 0);
        extra.set(Calendar.HOUR_OF_DAY, 0);
        extra.set(Calendar.MILLISECOND, 0);
        noturna.set(Calendar.MINUTE, 0);
        noturna.set(Calendar.HOUR_OF_DAY, 0);
        noturna.set(Calendar.MILLISECOND, 0);
        //seta o comparativo
        compara.set(Calendar.MINUTE, Integer.parseInt(jornadaS[1]));
        compara.set(Calendar.HOUR_OF_DAY, Integer.parseInt(jornadaS[0]));
        compara.set(Calendar.MILLISECOND, 0);
        for (int x = 0; x < jTable1.getRowCount(); x++) {
            if (tb.getValueAt(x, 0) == "D" && tb.getValueAt(x, 7) == "00:00") {
                System.out.println("1");
            } else if (jTable1.getValueAt(x, 7) != null) {
                Calendar falta = Calendar.getInstance();       //falta = 07:20
                falta.set(Calendar.MINUTE, Integer.parseInt(jornadaS[1]));
                falta.set(Calendar.HOUR_OF_DAY, Integer.parseInt(jornadaS[0]));

                String temp2 = (String) jTable1.getValueAt(x, 7);
                temp = temp2.split(":");        //temp[0] hora, temp[1] minuto
                //seta horas trabalhadas do dia
                hrTrabalhada.set(Calendar.HOUR_OF_DAY, Integer.parseInt(temp[0]));
                hrTrabalhada.set(Calendar.MINUTE, Integer.parseInt(temp[1]));

                Date c1, c2;                    //Date para compara√ß√£o nos ifs
                c1 = hrTrabalhada.getTime();
                c2 = compara.getTime();
                if (c1.equals(c2)) {

                } else if (c1.after(c2)) {
                    if (verificaHorasNoturnas(x)) {
                        hrTrabalhada.add(Calendar.MINUTE, -compara.get(Calendar.MINUTE));
                        hrTrabalhada.add(Calendar.HOUR_OF_DAY, -compara.get(Calendar.HOUR_OF_DAY));
                        extra.add(Calendar.MINUTE, hrTrabalhada.get(Calendar.MINUTE));
                        extra.add(Calendar.HOUR_OF_DAY, hrTrabalhada.get(Calendar.HOUR_OF_DAY));
                    } else {
                        //c√≥digo incompleto
                    }

                } else if (c1.before(c2)) {
                    if (tb.getValueAt(x, 0) != "D" && !"00:00".equals((String) tb.getValueAt(x, 7))) {   //se for domingo nao contabiliza horas faltas
                        falta.add(Calendar.MINUTE, -hrTrabalhada.get(Calendar.MINUTE));
                        falta.add(Calendar.HOUR_OF_DAY, -hrTrabalhada.get(Calendar.HOUR_OF_DAY));
                        totalFalta.add(Calendar.MINUTE, falta.get(Calendar.MINUTE));
                        totalFalta.add(Calendar.HOUR_OF_DAY, falta.get(Calendar.HOUR_OF_DAY));
                    }
                }
            }
        }
        SimpleDateFormat formato = new SimpleDateFormat("HH:mm");
        horasFaltastxt.setText(formato.format(totalFalta.getTime()));
        horasExtrastxt.setText(formato.format(extra.getTime()));
        //quando exede mais de 24 horas de hora extra
        if (compara.get(Calendar.DAY_OF_YEAR) < extra.get(Calendar.DAY_OF_YEAR)) {
            int totalDias = extra.get(Calendar.DAY_OF_YEAR) - compara.get(Calendar.DAY_OF_YEAR);
        }
    }

    @Deprecated
    private boolean verificaHorasNoturnas(int x) {
        //inicia verifica√ß√£o de horas noturnas
        String entrada = "0", saida_intervalo = "0", entrada_intervalo = "0", saida = "0", entrada_2 = "0", saida_2 = "0";
        try {
            if (tb.getValueAt(x, 1) != null) {
                entrada = (String) tb.getValueAt(x, 1);
                entrada = entrada.substring(0, 2);
            }
        } catch (Exception ex) {
        }
        try {
            if (tb.getValueAt(x, 2) != null) {
                saida_intervalo = (String) tb.getValueAt(x, 2);
                saida_intervalo = saida_intervalo.substring(0, 2);
            }
        } catch (Exception ex) {
        }
        try {
            if (tb.getValueAt(x, 3) != null) {
                entrada_intervalo = (String) tb.getValueAt(x, 3);
                entrada_intervalo = entrada_intervalo.substring(0, 2);
            }
        } catch (Exception ex) {
        }
        try {
            if (tb.getValueAt(x, 4) != null) {
                saida = (String) tb.getValueAt(x, 4);
                saida = saida.substring(0, 2);
            }
        } catch (Exception ex) {
        }
        try {
            if (tb.getValueAt(x, 5) != null) {
                entrada_2 = (String) tb.getValueAt(x, 5);
                entrada_2 = entrada_2.substring(0, 2);
            }
        } catch (Exception ex) {
        }
        try {
            if (tb.getValueAt(x, 6) != null) {
                saida_2 = (String) tb.getValueAt(x, 6);
                saida_2 = saida_2.substring(0, 2);
            }
        } catch (Exception ex) {
        }
        //retorna verdadeiro se nao tiver horas noturnas
        return Integer.parseInt(entrada) < 22 && Integer.parseInt(saida_intervalo) < 22 && Integer.parseInt(entrada_intervalo) < 22 && Integer.parseInt(saida) < 22 && Integer.parseInt(entrada_2) < 22 && Integer.parseInt(saida_2) < 22;
    }

    /*
    *@param @valorTB
    * recebe valor no formato ##:## (horas)
    * e retorna em ##,## (decimais)
     */
    private float horaPDecimal(String valorTB) {
        double valor = Double.parseDouble(valorTB.replaceAll(":", "."));
        float fracao = (float) ((valor) - (int) valor);
        fracao = (fracao * 100) / 60;
        double duas = CDbl.CDblDuasCasas(fracao);
        duas *= 100;
        if (duas % 10 > 5) {
            fracao += 0.01;
        }
        fracao += (int) valor;
        //System.out.println("ValorTbparaDouble>> recebido: "+valor+ " entregue: "+(float)CDbl.CDblDuasCasas(fracao));
        return (float) CDbl.CDblDuasCasas(fracao);
    }

    /*
    *@param @decimal
    * recebe valor no formato ##.## (decimal)
    * e retorna em ##:## (horas)
     */
    private String decimalPHora(double decimal) {
        //double valorExtato = CDbl.CDblTresCasas(((decimal - (int) decimal) * 60 / 100) + (int) decimal);
        double valor = CDbl.CDblDuasCasas(((decimal - (int) decimal) * 60 / 100) + (int) decimal);
        String retorno = Double.toString(valor);
        retorno = retorno.replaceAll("\\.", ":");
        if (valor < 10) {      //coloca um 0 na frente pra nao fica #:##, mas sim 0#:## caso o horario possa ser menor q 10
            retorno = "0" + retorno;
        }
        double test = valor;
        test -= (int) test;
        test = CDbl.CDblDuasCasas(test);
        test *= 10;
        if (test - (int) test == 0) { //coloca um 0 atraz para nao ficar ##:# caso os minutos venham a ser exatos.
            retorno = retorno + "0";
        }
        return retorno;
    }

    private void limpaCampos() {
        entradatxt.setText("");
        sintervalo.setText("");
        eintervalo.setText("");
        saidatxt.setText("");
        entrada2.setText("");
        saida2.setText("");
    }

    private void salvar() {
        CartaoPonto cartao = new CartaoPonto();
        cartao.setFuncionario(fun);
        cartao.setTabela(tb);
        cartao.setAno(ano);
        cartao.setMes(mes);
        cartao.setDias(tb.getRowCount());

        cartao.setExtra(horasExtrastxt.getText());
        cartao.setFalta(horasFaltastxt.getText());
        cartao.setNoturna(horasExtrasNoturnastxt.getText());
        cartao.setReducao(Double.parseDouble(reducaoNoturnotxt.getText()));
        cartao.setJornada(jornadaString);
        if (new CartaoPontoDAO().salvar(cartao)) {
            JOptionPane.showMessageDialog(this, "Salvo com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Algo deu errado!");
        }
    }

    private void verificarExistente() {
        boolean lancado = new CartaoPontoDAO().lancado(fun, mes, ano);
        if (lancado) {
            CartaoPonto ponto = new CartaoPontoDAO().getLancado(fun, mes, ano);
            horasExtrastxt.setText(ponto.getExtra());
            horasFaltastxt.setText(ponto.getFalta());
            horasExtrasNoturnastxt.setText(ponto.getNoturna());
            reducaoNoturnotxt.setText(Double.toString(ponto.getReducao()));
            for (int x = 0; x < ponto.getDias(); x++) {
                String v1, v2, v3, v4, v5, v6, v7, v8;
                v1 = (String) ponto.getTabela().getValueAt(x, 0);
                v2 = (String) ponto.getTabela().getValueAt(x, 1);
                v3 = (String) ponto.getTabela().getValueAt(x, 2);
                v4 = (String) ponto.getTabela().getValueAt(x, 3);
                v5 = (String) ponto.getTabela().getValueAt(x, 4);
                v6 = (String) ponto.getTabela().getValueAt(x, 5);
                v7 = (String) ponto.getTabela().getValueAt(x, 6);
                v8 = (String) ponto.getTabela().getValueAt(x, 7);
                tb.setValueAt(v1, x, 0);
                tb.setValueAt(v2, x, 1);
                tb.setValueAt(v3, x, 2);
                tb.setValueAt(v4, x, 3);
                tb.setValueAt(v5, x, 4);
                tb.setValueAt(v6, x, 5);
                tb.setValueAt(v7, x, 6);
                tb.setValueAt(v8, x, 7);
            }
            jaLancado = true;
            reg = ponto.getReg();
            reg_sub = ponto.getReg_sub();
            if (ponto.getJornada().equals("07:20")) {
                jornada7.setSelected(true);
                jornada6.setSelected(false);
            } else {
                jornada6.setSelected(true);
                jornada7.setSelected(false);
            }
            StatusBtn(false);
        } else {
            horasExtrastxt.setText("");
            horasFaltastxt.setText("");
            horasExtrasNoturnastxt.setText("");
            reducaoNoturnotxt.setText("");
            for (int x = 0; x < jTable1.getRowCount(); x++) {
                tb.setValueAt(null, x, 1);
                tb.setValueAt(null, x, 2);
                tb.setValueAt(null, x, 3);
                tb.setValueAt(null, x, 4);
                tb.setValueAt(null, x, 5);
                tb.setValueAt(null, x, 6);
                tb.setValueAt(null, x, 7);
            }
            jaLancado = false;
            reg = -1;
            reg_sub = -1;
            StatusBtn(true);
        }
    }

    private void atualizar() {
        CartaoPonto cartao = new CartaoPonto();
        cartao.setFuncionario(fun);
        cartao.setTabela(tb);
        cartao.setAno(ano);
        cartao.setMes(mes);
        cartao.setDias(tb.getRowCount());
        cartao.setReg(reg);
        cartao.setReg_sub(reg_sub);
        cartao.setExtra(horasExtrastxt.getText());
        cartao.setFalta(horasFaltastxt.getText());
        cartao.setNoturna(horasExtrasNoturnastxt.getText());
        cartao.setReducao(Double.parseDouble(reducaoNoturnotxt.getText()));
        cartao.setJornada(jornadaString);
        if (new CartaoPontoDAO().atualizar(cartao)) {
            JOptionPane.showMessageDialog(this, "Atualizado com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Algo deu errado!");
        }
    }

    private void StatusBtn(boolean habilitado) {
        sabadoBtn.setVisible(habilitado);
        domingoBtn.setVisible(habilitado);
        folgaBtn.setVisible(habilitado);
        feriadoBtn.setVisible(habilitado);
        atestadoBtn.setVisible(habilitado);
        faltaBtn.setVisible(habilitado);
        limpaDiaBtn.setVisible(habilitado);
        concluirBtn.setVisible(habilitado);
        entradatxt.setEnabled(habilitado);
        sintervalo.setEnabled(habilitado);
        eintervalo.setEnabled(habilitado);
        saidatxt.setEnabled(habilitado);
        entrada2.setEnabled(habilitado);
        saida2.setEnabled(habilitado);
        jornada6.setEnabled(habilitado);
        jornada7.setEnabled(habilitado);
        editbtn.setVisible(!habilitado); //contr√°rio
    }

    private void calcularAproximacao() {
        int domingos = (int) feriadosSpin.getValue();
        int totalDias = tb.getRowCount();
        for (int i = 0; i < tb.getRowCount() - 1; i++) {
            try {
                if ("D".equals((String) tb.getValueAt(i, 0))) {
                    domingos++;
                }
            } catch (Exception e) {
            }
        }
        double jornada = horaPDecimal(jornadaString);
        double horas_mes = jornada * 30;
        try {
            double valor_hora = ((double) salarioBase.getValue()) / horas_mes;

            valorHora.setText(Double.toString(CDbl.CDblDuasCasas(valor_hora)));
            valorHoraExtra.setText(Double.toString(CDbl.CDblDuasCasas(valor_hora) * 1.55));

            double total = valor_hora * horas_mes;

            double extra = 0;
            try {
                extra = horaPDecimal(horasExtrastxt.getText()) + horaPDecimal(horasExtrasNoturnastxt.getText());
                extra *= Double.parseDouble(valorHoraExtra.getText());
            } catch (Exception e) {
            }

            double dsr = 0;
            try {
                dsr = CDbl.CDblDuasCasas((extra / (totalDias - domingos)) * domingos);
            } catch (Exception i) {
            }
            String horadsr = "00:00";
            if (dsr != 0) {
                double dsrdecimal = dsr / valor_hora;
                horadsr = decimalPHora(dsrdecimal);
            }
            valorTotalExtra.setText(Double.toString(CDbl.CDblDuasCasas(extra)));
            valorDSR.setText(Double.toString(CDbl.CDblDuasCasas(dsr)));
            horaDSR.setText(horadsr);
            total += extra + dsr + (double) indenizacaoSpin.getValue();
            total -= (double) descontoSpin.getValue();
            double inss = total * (((int) inssSpin.getValue() / (double) 100));
            inss = CDbl.CDblDuasCasas(inss);
            total -= inss;
            valorTotalSalario.setText(Double.toString(CDbl.CDblDuasCasas(total)));
            INSS.setText(Double.toString(inss));

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    public void importCVS() {
        JFileChooser fl = new JFileChooser();
        fl.setDialogTitle("Importar arquivo CSV");
        fl.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivo CSV", "csv");
        fl.setFileFilter(filter);
        int op = fl.showOpenDialog(null);
        if (op != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File file = fl.getSelectedFile();
        String arquivoCSV = file.getPath();
        //String arquivoCSV = "C:\\Users\\User\\Desktop\\MAIO-2019.csv";
        BufferedReader br = null;
        String linha = "";
        String csvDivisor = ";";
        int countLinha = 0;
        String[][] tabela = new String[31][7];
        for (int x = 0; x < 31; x++) {
            for (int i = 0; i < 7; i++) {
                tabela[x][i] = "";
            }
        }
        try {
            br = new BufferedReader(new FileReader(arquivoCSV));
            while ((linha = br.readLine()) != null) {
                String[] produto = linha.split(csvDivisor);
                for (int x = 0; x < produto.length; x++) {
                    if (countLinha >= 6 && countLinha <= 36 && x < 7) {
                        tabela[countLinha - 6][x] = produto[x];
                    }
                }
                countLinha++;
            }
            lancarImport(tabela);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmLancarCartaoPonto2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(frmLancarCartaoPonto2.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ex) {
                    Logger.getLogger(frmLancarCartaoPonto2.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void lancarImport(String[][] tabela) {
        for (int x = 0; x < tb.getRowCount(); x++) {
            char situacao = tabela[x][0].toCharArray()[0];
            //System.out.println(situacao);
            boolean verificacao = true;
            switch (situacao) {
                case 'R':
                    folgaBtnActionPerformed(null);
                    verificacao = false;
                    break;
                case 'S':
                    sabadoBtnActionPerformed(null);
                    verificacao = false;
                    break;
                case 'D':
                    if (tabela[x][1].equals("")) {
                        domingoBtnActionPerformed(null);
                        verificacao = false;
                    } else {
                        verificacao = true;
                    }
                    break;
                case 'H':
                    feriadoBtnActionPerformed(null);
                    verificacao = false;
                    break;
                case 'A':
                    if (tabela[x][1].equals("")) {
                        atestadoBtnActionPerformed(null);
                        verificacao = false;
                    } else {
                        verificacao = true;
                    }
                    break;
                case 'F':
                    faltaBtnActionPerformed(null);
                    verificacao = false;
                    break;
            }
            if (verificacao) {
                entradatxt.setText(verificaStringHorario(tabela[x][1].replaceAll(",", ":")));
                sintervalo.setText(verificaStringHorario(tabela[x][2].replaceAll(",", ":")));
                eintervalo.setText(verificaStringHorario(tabela[x][3].replaceAll(",", ":")));
                saidatxt.setText(verificaStringHorario(tabela[x][4].replaceAll(",", ":")));
                entrada2.setText(verificaStringHorario(tabela[x][5].replaceAll(",", ":")));
                saida2.setText(verificaStringHorario(tabela[x][6].replaceAll(",", ":")));
                lancarDiaImport();
            }
        }
    }

    private void lancarDiaImport() {
        lancarHorarios();
        diaSpinner.setValue((int) diaSpinner.getValue() + 1);
        entradatxt.requestFocus();
        Horas();
    }

    private String verificaStringHorario(String temp) {
        temp = temp.trim();
        System.out.println("e>>>" + temp);
        if ("".equals(temp) || temp == null || "-".equals(temp)) {
            return "  :  ";
        }
        String[] s = temp.split(":");
        if (Integer.parseInt(s[0]) < 10) {     //s[0] = 12 : s[1] = 21
            s[0] = "0" + s[0];
        }
        System.out.println("s>>" + s[0] + ":" + s[1]);
        return s[0] + ":" + s[1];
    }

    private double[] calculoNoturno(double[] horarios) {
        double entrada, saida_intervalo, entrada_intervalo, saida, entrada_ex, saida_ex;
        entrada = horarios[0];
        saida_intervalo = horarios[1];
        entrada_intervalo = horarios[2];
        saida = horarios[3];
        entrada_ex = horarios[4];
        saida_ex = horarios[5];
        if (saida_ex <= 21.99) {
            if (saida_ex < 5.01) {
                saida_ex += 24;
            } else {
                saida_ex = 0;
            }
        }
        if (entrada_ex <= 21.99) {
            if (entrada_ex < 5.01) {
                entrada_ex += 24;
            } else {
                if (saida_ex > 0) {
                    entrada_ex = 22;
                } else {
                    entrada_ex = 0;
                }
            }
        }
        if (saida <= 21.99) {
            if (saida < 5.01) {
                saida += 24;
            } else {
                saida = 0;
            }
        }
        if (entrada_intervalo <= 21.99) {
            if (entrada_intervalo < 5.01) {
                entrada_intervalo += 24;
            } else {
                if (saida > 0) {
                    entrada_intervalo = 22;
                } else {
                    entrada_intervalo = 0;
                }
            }
        }
        if (saida_intervalo <= 21.99) {
            if (saida_intervalo < 5.01) {
                saida_intervalo += 24;
            } else {
                saida_intervalo = 0;
            }
        }
        if (entrada <= 21.99) {
            if (entrada < 5.01) {
                entrada += 24;
            } else {
                if (saida_intervalo > 0) {
                    entrada = 22;
                } else {
                    entrada = 0;
                }
            }
        }
        horarios[0] = entrada;
        horarios[1] = saida_intervalo;
        horarios[2] = entrada_intervalo;
        horarios[3] = saida;
        horarios[4] = entrada_ex;
        horarios[5] = saida_ex;
        return horarios;
    }

    private void carregarDiaClickado(int i) {
        entradatxt.setText((String) jTable1.getValueAt(i, 1));
        sintervalo.setText((String) jTable1.getValueAt(i, 2));
        eintervalo.setText((String) jTable1.getValueAt(i, 3));
        saidatxt.setText((String) jTable1.getValueAt(i, 4));
        entrada2.setText((String) jTable1.getValueAt(i, 5));
        saida2.setText((String) jTable1.getValueAt(i, 6));
    }

    private void verificacaoMeiaNoite(String text) {
        if (!"  :  ".equals(text)) {
            double temp = horaPDecimal(text);
            if (temp>0 && temp<3){
                exibirMensagemHorario();
            }
        }
    }

    private void exibirMensagemHorario() {
        if (infoMensagem){
            JOptionPane.showMessageDialog(this, "Se o hor√°rio informado for respectivo a outro dia deve-se somar 24Horas"+
                    "\nEx: Entrada: 20:00\nSaida: 02:00 (do outro dia)"+
                    "\nEnt√£o:\nEntrada: 20:00\nSaida: 26:00","Verifica√ß√£o de Hor√°rio",JOptionPane.WARNING_MESSAGE);
            infoMensagem=false;
        }
    }
}
